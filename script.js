//fileJs.addFile('src/promis.js'/*, 'promis'*/);
//add.addFile('src/class.js');
//add.addFile('src/callbackhell.js');
//fileJs.removeFile('src/promis.js''promis');
elemDom.addElem("div", "div", body);
elemDom.addElem("p", "p", document.querySelector(".div"));
/*elemDom.removeElem("p", "div");*/

document.querySelector(".p").innerText = `Библиотека Eva предназначена для подключения/отключения файлов скриптов. Подключив только лишь библиотеку Eva, в основном фаиле скриптов Вы сможете управлять всеми остальными подключениями файлов с расширением .js. Так же в возможности библиотеки Eva входит добавление/удаление элемента в DOM, давайте по подробнее разберемся с этими возможностями! \n Начнем! \n Метод fileJs.addFile - предназначен для подключения файла скрипта, принимает два параметра: \n 1) Адрес файла в виде строки(обязательный параметр); \n 2) Имя подключаемого файла(не обязательный параметр, нужен для более простого отключения файла скрипта) \n Пример: \n fileJs.addFile('src/promis.js', 'promis') - где первый агрумент является адресом, а второй именем;\n \n Метод fileJs.removeFile - предназначен для отключения файла скрипта от главного документа, принимает один параметр: адрес файла скрипта или имя файла скрипта. \n Пример: \n fileJs.removeFile('src/promis.js'); аргумент принял адрес файла скрипта \n fileJs.removeFile('promis'); аргумент принял имя файла скрипта \n \n Метод elemDom.addElem - предназначен для добавления элемента в DOM, принимает три параметра: \n 1) Имя тега элемента \n 2) Имя класса элемента \n 3) Элемент-родитель в который будет помещен вновь созданный элемент. \n Пример: \n const body = document.body - получаем элемент-родитель \n elemDom.addElem("div", "contein", body); где "div" - имя тега, "contein" - имя класса, body - элемент-родитель \n ВАЖНО!элемент добавляется только первым потомком родителя \n \n Метод elemDom.removeElem - предназначен для удаления элемента из DOM, принимает два параметра: \n 1) Имя класса элемента \n 2) Имя класса родителя \n Пример: \n elemDom.removeElem("p", "div"); где "p" - это имя класса элемента который удаляем, "div" имя класса элемента являющегося прямым родителем элемента \n ВАЖНО! если несколько элементов имеют одино и то же имя класса удалиться первый элемент`  
